{
  "info": {
    "name": "Weird Music API",
    "description": "Tests for your weird music tracker",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has status property', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('ok');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "Get All Tracks",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "",
              "pm.test('Tracks have required properties', function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.length > 0) {",
              "        pm.expect(jsonData[0]).to.have.property('id');",
              "        pm.expect(jsonData[0]).to.have.property('title');",
              "        pm.expect(jsonData[0]).to.have.property('artist');",
              "        pm.expect(jsonData[0]).to.have.property('weirdness');",
              "    }",
              "});",
              "",
              "pm.test('Response time is less than 500ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/tracks",
          "host": ["{{baseUrl}}"],
          "path": ["api", "tracks"]
        }
      }
    },
    {
      "name": "Get Tracks by Weirdness",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('All tracks meet minimum weirdness', function () {",
              "    const jsonData = pm.response.json();",
              "    jsonData.forEach(track => {",
              "        pm.expect(track.weirdness).to.be.at.least(8);",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/tracks?minWeirdness=8",
          "host": ["{{baseUrl}}"],
          "path": ["api", "tracks"],
          "query": [
            {
              "key": "minWeirdness",
              "value": "8"
            }
          ]
        }
      }
    },
    {
      "name": "Create New Track",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response contains created track', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.title).to.eql('Strobe');",
              "    pm.expect(jsonData.artist).to.eql('Deadmau5');",
              "});",
              "",
              "pm.test('Track has auto-generated ID', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.id).to.be.a('number');",
              "    // Save the ID for later tests",
              "    pm.environment.set('lastTrackId', jsonData.id);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Strobe\",\n  \"artist\": \"Deadmau5\",\n  \"weirdness\": 6,\n  \"genre\": \"Progressive House\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/tracks",
          "host": ["{{baseUrl}}"],
          "path": ["api", "tracks"]
        }
      }
    },
    {
      "name": "Create Track - Validation Error",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Error message is present', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Missing Artist\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/tracks",
          "host": ["{{baseUrl}}"],
          "path": ["api", "tracks"]
        }
      }
    },
    {
      "name": "Get Single Track",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is a single track object', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "    pm.expect(jsonData).to.have.property('id');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/tracks/1",
          "host": ["{{baseUrl}}"],
          "path": ["api", "tracks", "1"]
        }
      }
    },
    {
      "name": "Get Single Track - Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Error message is present', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/tracks/9999",
          "host": ["{{baseUrl}}"],
          "path": ["api", "tracks", "9999"]
        }
      }
    },
    {
      "name": "Update Track",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Track was updated', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.weirdness).to.eql(10);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"weirdness\": 10\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/tracks/1",
          "host": ["{{baseUrl}}"],
          "path": ["api", "tracks", "1"]
        }
      }
    },
    {
      "name": "Delete Track",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test('Response body is empty', function () {",
              "    pm.expect(pm.response.text()).to.be.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/tracks/2",
          "host": ["{{baseUrl}}"],
          "path": ["api", "tracks", "2"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}